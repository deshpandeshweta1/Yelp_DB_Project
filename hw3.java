
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.lang.Integer.parseInt;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Shweta
 */
public class hw3 extends javax.swing.JFrame {

    static hw3 homeWork = null;

    ActionListener actionListener = null;
    ArrayList<String> categoryList = null;
    ActionListener subCategoryActionListener = null;
    ArrayList<String> subCategoryList = null;
    // HashMap<String, String> categorySubcategoryMapping = null;  // Added New hashMap

    /**
     * Creates new form java
     */
    public hw3() {

        initComponents();

        mainCategoryPanel.setLayout(new GridLayout(0, 1));
        subCategoryPanel.setLayout(new GridLayout(0, 1));

        subCategoryPanel.setLayout(new GridLayout(0, 1));

        categoryList = new ArrayList<String>();
        subCategoryList = new ArrayList<String>();
        //  categorySubcategoryMapping = new HashMap<String, String>(); // Added new hashMap

        actionListener = new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                JCheckBox catCheckBox = (JCheckBox) actionEvent.getSource();
                if (catCheckBox.isSelected()) {
                    String selected = catCheckBox.getText();
                    categoryList.add(selected);
                } else {
                    String removeCat = catCheckBox.getText();
                    categoryList.remove(removeCat);
                    // removeSubCategory(removeCat);       //hashMap: remove entries from subCategory ArrayList if mainCategory is removed.
                }
                try {
                    homeWork.getSubCategories(categoryList);
                } catch (SQLException ex) {
                    Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        subCategoryActionListener = new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                JCheckBox subCatCheckBox = (JCheckBox) actionEvent.getSource();
                if (subCatCheckBox.isSelected()) {
                    String selected = subCatCheckBox.getText();
                    subCategoryList.add(selected);
                } else {
                    String removeSubCat = subCatCheckBox.getText();
                    subCategoryList.remove(removeSubCat);
                }
                /* System.out.println("-----------------");
                for(String subCat : subCategoryList)
                {
                    System.out.println(subCat);
                }
                System.out.println("-----------------");*/
            }
        };

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        resultPanel = new javax.swing.JPanel();
        userInputPanel = new javax.swing.JPanel();
        memberSinceLabel = new javax.swing.JLabel();
        reviewCountLabel = new javax.swing.JLabel();
        numberOfFriendsLabel = new javax.swing.JLabel();
        averageStarLabel = new javax.swing.JLabel();
        selectConditionLabel = new javax.swing.JLabel();
        reviewCountCombo = new javax.swing.JComboBox<>();
        numberOfFriendsCombo = new javax.swing.JComboBox<>();
        selectConditionCombo = new javax.swing.JComboBox<>();
        averageStarCombo = new javax.swing.JComboBox<>();
        reviewCountValueLabel = new javax.swing.JLabel();
        numberOfFriendsValueLabel = new javax.swing.JLabel();
        averageStarValueLabel = new javax.swing.JLabel();
        reviewCountTextField = new javax.swing.JTextField();
        numberOfFriendsTextField = new javax.swing.JTextField();
        averageStarTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        executeQueryTextArea = new javax.swing.JTextArea();
        executeQueryButton = new javax.swing.JButton();
        jDateMemberSince = new com.toedter.calendar.JDateChooser();
        userResultPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userResultTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        executeQueryBusinessTextArea = new javax.swing.JTextArea();
        executeQueryBusinessButton = new javax.swing.JButton();
        jPanelCheckin = new javax.swing.JPanel();
        toCheckinLabel = new javax.swing.JLabel();
        fromHourCombo = new javax.swing.JComboBox<>();
        fromCheckinLabel = new javax.swing.JLabel();
        fromDayCombo = new javax.swing.JComboBox<>();
        noOfCheckinsTextFeilds = new javax.swing.JTextField();
        noOfCheckinValueLabel = new javax.swing.JLabel();
        toDayCombo = new javax.swing.JComboBox<>();
        toHourCombo = new javax.swing.JComboBox<>();
        noOfCheckinLabel = new javax.swing.JLabel();
        noOfCheckinsCombo = new javax.swing.JComboBox<>();
        jPanelReview = new javax.swing.JPanel();
        starReviewCombo = new javax.swing.JComboBox<>();
        votesReviewValueLabel = new javax.swing.JLabel();
        starReviewLabel = new javax.swing.JLabel();
        votesReviewTextField = new javax.swing.JTextField();
        starReviewTextField = new javax.swing.JTextField();
        fromReviewLabel = new javax.swing.JLabel();
        toReviewLabel = new javax.swing.JLabel();
        jDateToReview = new com.toedter.calendar.JDateChooser();
        votesReviewCombo = new javax.swing.JComboBox<>();
        jDateFromReview = new com.toedter.calendar.JDateChooser();
        votesReviewLabel = new javax.swing.JLabel();
        starReviewValueLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        businessResultTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        mainCategoryPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        subCategoryPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Yelp Database Application", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jPanel2.setAutoscrolls(true);

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 448, Short.MAX_VALUE)
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );

        userInputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        userInputPanel.setName("User"); // NOI18N

        memberSinceLabel.setText("Member Since:");

        reviewCountLabel.setText("Review Count:");

        numberOfFriendsLabel.setText("No. of Friends:");

        averageStarLabel.setText("Avg. Stars:");

        selectConditionLabel.setText("Select:");

        reviewCountCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<" }));

        numberOfFriendsCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<" }));

        selectConditionCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR" }));

        averageStarCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<" }));

        reviewCountValueLabel.setText("Value:");

        numberOfFriendsValueLabel.setText("Value:");

        averageStarValueLabel.setText("Value:");

        executeQueryTextArea.setColumns(20);
        executeQueryTextArea.setLineWrap(true);
        executeQueryTextArea.setRows(5);
        executeQueryTextArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(executeQueryTextArea);

        executeQueryButton.setText("Execute Query");
        executeQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeQueryButtonActionPerformed(evt);
            }
        });

        jDateMemberSince.setDateFormatString("dd-MMM-yyyy");

        javax.swing.GroupLayout userInputPanelLayout = new javax.swing.GroupLayout(userInputPanel);
        userInputPanel.setLayout(userInputPanelLayout);
        userInputPanelLayout.setHorizontalGroup(
            userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userInputPanelLayout.createSequentialGroup()
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, userInputPanelLayout.createSequentialGroup()
                            .addGap(33, 33, 33)
                            .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(memberSinceLabel)
                                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(selectConditionLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(averageStarLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(numberOfFriendsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(reviewCountLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(selectConditionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jDateMemberSince, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(userInputPanelLayout.createSequentialGroup()
                                    .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(reviewCountCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(averageStarCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(numberOfFriendsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(42, 42, 42)
                                    .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(userInputPanelLayout.createSequentialGroup()
                                            .addComponent(numberOfFriendsValueLabel)
                                            .addGap(18, 18, 18)
                                            .addComponent(numberOfFriendsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(userInputPanelLayout.createSequentialGroup()
                                            .addComponent(reviewCountValueLabel)
                                            .addGap(18, 18, 18)
                                            .addComponent(reviewCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(userInputPanelLayout.createSequentialGroup()
                                            .addComponent(averageStarValueLabel)
                                            .addGap(18, 18, 18)
                                            .addComponent(averageStarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGroup(userInputPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(userInputPanelLayout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(executeQueryButton)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        userInputPanelLayout.setVerticalGroup(
            userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userInputPanelLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateMemberSince, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memberSinceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reviewCountLabel)
                    .addComponent(reviewCountCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reviewCountValueLabel)
                    .addComponent(reviewCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfFriendsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberOfFriendsValueLabel)
                    .addComponent(numberOfFriendsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberOfFriendsLabel))
                .addGap(30, 30, 30)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(averageStarLabel)
                    .addComponent(averageStarCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(averageStarValueLabel)
                    .addComponent(averageStarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectConditionLabel)
                    .addComponent(selectConditionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(executeQueryButton))
        );

        reviewCountTextField.getAccessibleContext().setAccessibleName("");

        userResultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));

        userResultTable.setAutoCreateRowSorter(true);
        userResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "User_id","Name", "yelping_since", "average_stars", "Number_Of_Friends"
            }
        ));
        userResultTable.setCellSelectionEnabled(true);
        userResultTable.setEnabled(false);
        userResultTable.setMaximumSize(new java.awt.Dimension(1, 1));
        userResultTable.setRowHeight(20);
        userResultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userResultTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userResultTable);

        javax.swing.GroupLayout userResultPanelLayout = new javax.swing.GroupLayout(userResultPanel);
        userResultPanel.setLayout(userResultPanelLayout);
        userResultPanelLayout.setHorizontalGroup(
            userResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
        );
        userResultPanelLayout.setVerticalGroup(
            userResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userResultPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userResultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(239, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(461, 461, 461))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userResultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Users", jPanel2);

        jPanel1.setAutoscrolls(true);
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 929));

        executeQueryBusinessTextArea.setColumns(20);
        executeQueryBusinessTextArea.setLineWrap(true);
        executeQueryBusinessTextArea.setRows(5);
        executeQueryBusinessTextArea.setWrapStyleWord(true);
        jScrollPane3.setViewportView(executeQueryBusinessTextArea);

        executeQueryBusinessButton.setText("Execute Query");
        executeQueryBusinessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeQueryBusinessButtonActionPerformed(evt);
            }
        });

        jPanelCheckin.setBorder(javax.swing.BorderFactory.createTitledBorder("Checkin"));

        toCheckinLabel.setText("to");

        fromHourCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        fromCheckinLabel.setText("from");

        fromDayCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));

        noOfCheckinValueLabel.setText("value:");

        toDayCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));

        toHourCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        noOfCheckinLabel.setText("Num. of Ckeckins: ");

        noOfCheckinsCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<" }));

        javax.swing.GroupLayout jPanelCheckinLayout = new javax.swing.GroupLayout(jPanelCheckin);
        jPanelCheckin.setLayout(jPanelCheckinLayout);
        jPanelCheckinLayout.setHorizontalGroup(
            jPanelCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCheckinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toCheckinLabel)
                    .addComponent(fromCheckinLabel)
                    .addComponent(noOfCheckinValueLabel)
                    .addGroup(jPanelCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelCheckinLayout.createSequentialGroup()
                            .addGroup(jPanelCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(fromDayCombo, 0, 63, Short.MAX_VALUE)
                                .addComponent(toDayCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanelCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fromHourCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(toHourCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelCheckinLayout.createSequentialGroup()
                            .addComponent(noOfCheckinLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanelCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(noOfCheckinsTextFeilds)
                                .addComponent(noOfCheckinsCombo, 0, 62, Short.MAX_VALUE))))))
        );
        jPanelCheckinLayout.setVerticalGroup(
            jPanelCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCheckinLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fromCheckinLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromHourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(toCheckinLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toHourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanelCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noOfCheckinLabel)
                    .addComponent(noOfCheckinsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(noOfCheckinsTextFeilds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noOfCheckinValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelReview.setBorder(javax.swing.BorderFactory.createTitledBorder("Review"));

        starReviewCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<" }));

        votesReviewValueLabel.setText("value:");

        starReviewLabel.setText("Star:");

        fromReviewLabel.setText("from");

        toReviewLabel.setText("to");

        jDateToReview.setDateFormatString("dd-MMM-yyyy");

        votesReviewCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<" }));

        jDateFromReview.setDateFormatString("dd-MMM-yyyy");

        votesReviewLabel.setText("Votes:");

        starReviewValueLabel.setText("value:");

        javax.swing.GroupLayout jPanelReviewLayout = new javax.swing.GroupLayout(jPanelReview);
        jPanelReview.setLayout(jPanelReviewLayout);
        jPanelReviewLayout.setHorizontalGroup(
            jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanelReviewLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(starReviewValueLabel)
                    .addComponent(votesReviewValueLabel)
                    .addComponent(votesReviewLabel)
                    .addGroup(jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(toReviewLabel)
                        .addComponent(fromReviewLabel))
                    .addComponent(starReviewLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(starReviewCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(starReviewTextField)
                        .addComponent(votesReviewTextField)
                        .addComponent(votesReviewCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateToReview, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateFromReview, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanelReviewLayout.setVerticalGroup(
            jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelReviewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fromReviewLabel)
                    .addComponent(jDateFromReview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toReviewLabel)
                    .addComponent(jDateToReview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(starReviewCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(starReviewLabel))
                .addGap(35, 35, 35)
                .addGroup(jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(starReviewValueLabel)
                    .addComponent(starReviewTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(votesReviewLabel)
                    .addComponent(votesReviewCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(votesReviewValueLabel)
                    .addComponent(votesReviewTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));

        businessResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "business_id","name", "city", "state", "star"
            }
        ));
        businessResultTable.setEnabled(false);
        businessResultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                businessResultTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(businessResultTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Category"));

        javax.swing.GroupLayout mainCategoryPanelLayout = new javax.swing.GroupLayout(mainCategoryPanel);
        mainCategoryPanel.setLayout(mainCategoryPanelLayout);
        mainCategoryPanelLayout.setHorizontalGroup(
            mainCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        mainCategoryPanelLayout.setVerticalGroup(
            mainCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        jScrollPane5.setViewportView(mainCategoryPanel);

        jScrollPane7.setBorder(javax.swing.BorderFactory.createTitledBorder("Sub-Category"));

        javax.swing.GroupLayout subCategoryPanelLayout = new javax.swing.GroupLayout(subCategoryPanel);
        subCategoryPanel.setLayout(subCategoryPanelLayout);
        subCategoryPanelLayout.setHorizontalGroup(
            subCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 232, Short.MAX_VALUE)
        );
        subCategoryPanelLayout.setVerticalGroup(
            subCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 426, Short.MAX_VALUE)
        );

        jScrollPane7.setViewportView(subCategoryPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanelCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanelReview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(529, 529, 529)
                        .addComponent(executeQueryBusinessButton, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanelReview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanelCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(executeQueryBusinessButton)
                        .addGap(442, 442, 442))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Business", jPanel1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void executeQueryBusinessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeQueryBusinessButtonActionPerformed
        // TODO add your handling code here:

        String query = null;
        String selectedCategory = "";
        String selectedSubCategory = "";

        /*Checkin Section*/
        int fromDayComboVal = (int) fromDayCombo.getSelectedIndex() - 1;
        int toDayComboVal = (int) toDayCombo.getSelectedIndex() - 1;

        String fromHourComboVal = (String) fromHourCombo.getSelectedItem();
        String toHourComboVal = (String) toHourCombo.getSelectedItem();
        int toHourInput = parseInt(toHourComboVal) - 1;

        String noOfCheckinsComboVal = (String) noOfCheckinsCombo.getSelectedItem();
        String noOfCheckins = noOfCheckinsTextFeilds.getText();

        /*Review Section*/
        String reviewStar = starReviewTextField.getText();
        String starReviewComboVal = (String) starReviewCombo.getSelectedItem();

        String reviewVotes = votesReviewTextField.getText();
        String votesReviewComboVal = (String) votesReviewCombo.getSelectedItem();

        SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd-MMM-yyyy");
        String todate = DATE_FORMAT.format(jDateToReview.getDate());
        String fromdate = DATE_FORMAT.format(jDateFromReview.getDate());

        for (int i = 0; i < categoryList.size(); i++) {
            if (i == (categoryList.size() - 1)) {
                selectedCategory = selectedCategory + "'" + categoryList.get(i) + "'";
            } else {
                selectedCategory = selectedCategory + "'" + categoryList.get(i) + "',";
            }
        }
        for (int i = 0; i < subCategoryList.size(); i++) {
            if (i == (subCategoryList.size() - 1)) {
                selectedSubCategory = selectedSubCategory + "'" + subCategoryList.get(i) + "'";
            } else {
                selectedSubCategory = selectedSubCategory + "'" + subCategoryList.get(i) + "',";
            }
        }

        query = "select businessTable.business_id ,businessTable.name, businessTable.city, businessTable.State, avg(businessTable.star) as avgStar"
                + "  from business businessTable,"
                + "  (select reviewTemp.business_id"
                + "  from (select r2.business_id ,r2.vote_funny+r2.vote_useful+r2.vote_cool as total_votes,r2.star  from review r2"
                + "  where r2.publish_date between '" + fromdate + "' and '" + todate + "') reviewTemp group by reviewTemp.business_id "
                + "having round(avg(reviewTemp.star),2)" + starReviewComboVal + reviewStar
                + "  and sum(reviewTemp.total_votes) " + votesReviewComboVal + reviewVotes + ") reviewTable,"
                + "  (select checkinTemp.business_id from"
                + "  (select c2.business_id,sum(c2.numberofcheckin)as checkinData from checkin c2 where"
                + "  c2.starthour between " + fromHourComboVal + " and " + toHourInput
                + "  and c2.day_id between " + fromDayComboVal + " and " + toDayComboVal
                + "  group by c2.business_id) checkinTemp"
                + "  where checkinTemp.checkinData " + noOfCheckinsComboVal + noOfCheckins + ") checkinTable,"
                + "  category categoryTable"
                + "  where businessTable.business_id = reviewTable.business_id"
                + "  and businessTable.business_id =  checkinTable.business_id"
                + "  and businessTable.business_id =  categoryTable.business_id"
                + "  and categoryTable.MAINCATEGORY_NAME in (" + selectedCategory + ")"
                + "  and categoryTable.SUBCATEGORY_NAME in (" + selectedSubCategory + ")"
                + "  group by businessTable.business_id ,businessTable.name, businessTable.city, businessTable.State"
                + "  order by avg(businessTable.star) desc";

        executeQueryBusinessTextArea.setText(query);
        homeWork.runQueryAndDisplayBusinessResult(query);
    }//GEN-LAST:event_executeQueryBusinessButtonActionPerformed

    private void userResultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userResultTableMouseClicked
        // TODO add your handling code here:
        Connection con = null;
        if (evt.getClickCount() == 2) {

            JTable target = (JTable) evt.getSource();
            String userID = (String) target.getModel().getValueAt(target.rowAtPoint(evt.getPoint()), 0);

            JFrame newwindow = new JFrame("Reviews");
            newwindow.setSize(500, 300);
            newwindow.setDefaultCloseOperation(newwindow.DISPOSE_ON_CLOSE);
            newwindow.setLocation(500, 300);

            String query = "select trim(u.name) as name, r.business_id, DBMS_LOB.substr(r.text, 300) as ReviewText from YELP_USER u, REVIEW r "
                    + "where r.USER_ID = u.USER_ID and r.user_id='" + userID + "'";
            try {
                con = homeWork.openConnection();
                Statement stmt = con.createStatement();

                PreparedStatement pre = con.prepareStatement(query);
                ResultSet rs = pre.executeQuery();

                DefaultTableModel model = new DefaultTableModel();
                JTable table = new JTable(model);
                table.setModel(DbUtils.resultSetToTableModel(rs));

                table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                TableColumn col0 = table.getColumnModel().getColumn(0);
                TableColumn col1 = table.getColumnModel().getColumn(1);
                TableColumn col2 = table.getColumnModel().getColumn(2);
                col0.setPreferredWidth(100);
                col1.setPreferredWidth(100);
                col2.setPreferredWidth(600);

                JScrollPane js = new JScrollPane(table);
                newwindow.add(js);

                rs.close();
                stmt.close();
                con.close();

                // System.out.println("DONE");
            } catch (SQLException e) {
                e.printStackTrace();
                System.err.println("SQL Exception");
            } catch (ClassNotFoundException e) {
                System.err.println("Cannot find the database driver");
            }
            newwindow.setVisible(true);
        }
    }//GEN-LAST:event_userResultTableMouseClicked

    private void executeQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeQueryButtonActionPerformed
        // TODO add your handling code here:
        String query = null;
        String rCount = reviewCountTextField.getText();
        String nFriends = numberOfFriendsTextField.getText();
        String aStar = averageStarTextField.getText();
        String conditionComboVal = (String) selectConditionCombo.getSelectedItem();
        String rCountComboVal = (String) reviewCountCombo.getSelectedItem();
        String nFriendsComboVal = (String) numberOfFriendsCombo.getSelectedItem();
        String averageStarComboVal = (String) averageStarCombo.getSelectedItem();

        SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd-MMM-yyyy");
        String date = DATE_FORMAT.format(jDateMemberSince.getDate());
        String[] tempDate = date.split("-");
        String yelpingDate= tempDate[2]+"-"+tempDate[1];
        //System.out.println(yelpingDate);
        

       /* query = "select user_id,trim(name) as name,to_char(yelping_since,'yyyy-mm')as yelping_since ,average_stars,"
                + "Number_of_friends as Number_Of_Friends from Yelp_user where "
                + "yelping_since >='" + date + "' " + conditionComboVal + " REVIEW_COUNT " + rCountComboVal + rCount + " "
                + conditionComboVal + " NUMBER_OF_FRIENDS" + nFriendsComboVal + nFriends
                + " " + conditionComboVal + " AVERAGE_STARS " + averageStarComboVal + aStar;*/
                
        query = "select user_id,trim(name) as Name,yelping_since as YelpingSince ,average_stars as Avg_Star,"
                + "Number_of_friends as Number_Of_Friends from Yelp_user where "
                + "to_date(yelping_since ,'yyyy-mm')>= to_date('"+yelpingDate+"','yyyy-MON') "
                + conditionComboVal + " REVIEW_COUNT " + rCountComboVal + rCount + " "
                + conditionComboVal + " NUMBER_OF_FRIENDS" + nFriendsComboVal + nFriends
                + " " + conditionComboVal + " AVERAGE_STARS " + averageStarComboVal + aStar;
                
                

        executeQueryTextArea.setText(query);
        homeWork.runQueryAndDisplayUserResult(query);
    }//GEN-LAST:event_executeQueryButtonActionPerformed

    private void businessResultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_businessResultTableMouseClicked
        // TODO add your handling code here:
        Connection con = null;
        if (evt.getClickCount() == 2) {

            JTable target = (JTable) evt.getSource();
            String business_id = (String) target.getModel().getValueAt(target.rowAtPoint(evt.getPoint()), 0);

            System.out.println(business_id);
            JFrame newwindow = new JFrame("Reviews");
            newwindow.setSize(500, 300);
            newwindow.setDefaultCloseOperation(newwindow.DISPOSE_ON_CLOSE);
            newwindow.setLocation(500, 300);

            String query = "select trim(u.name) as name, r.business_id, DBMS_LOB.substr(r.text, 300) as ReviewText from YELP_USER u, REVIEW r "
                    + "where r.USER_ID = u.USER_ID and r.business_id='" + business_id + "'";
           
            
            try {
                con = homeWork.openConnection();
                Statement stmt = con.createStatement();

                PreparedStatement pre = con.prepareStatement(query);
                ResultSet rs = pre.executeQuery();

                DefaultTableModel model = new DefaultTableModel();
                JTable table = new JTable(model);
                table.setModel(DbUtils.resultSetToTableModel(rs));

                table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                TableColumn col0 = table.getColumnModel().getColumn(0);
                TableColumn col1 = table.getColumnModel().getColumn(1);
                TableColumn col2 = table.getColumnModel().getColumn(2);
                col0.setPreferredWidth(100);
                col1.setPreferredWidth(100);
                col2.setPreferredWidth(600);

                JScrollPane js = new JScrollPane(table);
                newwindow.add(js);

                rs.close();
                stmt.close();
                con.close();

                // System.out.println("DONE");
            } catch (SQLException e) {
                e.printStackTrace();
                System.err.println("SQL Exception");
            } catch (ClassNotFoundException e) {
                System.err.println("Cannot find the database driver");
            }
            newwindow.setVisible(true);
        }
    }//GEN-LAST:event_businessResultTableMouseClicked

    public void runQueryAndDisplayUserResult(String query) {
        Connection con = null;

        try {
            con = homeWork.openConnection();
            Statement stmt = con.createStatement();

            PreparedStatement pre = con.prepareStatement(query);
            ResultSet rs = pre.executeQuery();
            userResultTable.setModel(DbUtils.resultSetToTableModel(rs));

            rs.close();
            stmt.close();
            con.close();

        } catch (SQLException e) {
            e.printStackTrace();
            System.err.println("SQL Exception");
        } catch (ClassNotFoundException e) {
            System.err.println("Cannot find the database driver");
        }

    }

    public void runQueryAndDisplayBusinessResult(String query) {
        Connection con = null;

        try {
            con = homeWork.openConnection();
            Statement stmt = con.createStatement();

            PreparedStatement pre = con.prepareStatement(query);
            ResultSet rs = pre.executeQuery();
            businessResultTable.setModel(DbUtils.resultSetToTableModel(rs));

            rs.close();
            stmt.close();
            con.close();

        } catch (SQLException e) {
            e.printStackTrace();
            System.err.println("SQL Exception");
        } catch (ClassNotFoundException e) {
            System.err.println("Cannot find the database driver");
        }

    }

    public void getMainCategories() throws SQLException {
        Connection con = null;

        try {
            con = homeWork.openConnection();
            Statement stmt = con.createStatement();

            String query = "SELECT MAINCATEGORY_NAME from MAINCATEGORY";

            PreparedStatement pre = con.prepareStatement(query);
            ResultSet rs = pre.executeQuery();

            while (rs.next()) {
                String MAINCATEGORY_NAME = rs.getString("MAINCATEGORY_NAME").trim();
                javax.swing.JCheckBox box = new javax.swing.JCheckBox(MAINCATEGORY_NAME);
                box.addActionListener(actionListener);
                mainCategoryPanel.add(box);
            }

            rs.close();
            stmt.close();
            con.close();

        } catch (SQLException e) {
            e.printStackTrace();
            System.err.println("SQL Exception");
        } catch (ClassNotFoundException e) {
            System.err.println("Cannot find the database driver");
        }

    }

    public void getSubCategories(ArrayList categoryList) throws SQLException {
        Connection con = null;
        String selectedCategory = "";
        try {
            con = homeWork.openConnection();
            Statement stmt = con.createStatement();
            // System.out.println(categoryList.size());
            // categorySubcategoryMapping.clear();     // cleared all the entries in hashMap
            if (categoryList.size() == 0) {
                subCategoryPanel.removeAll();
                subCategoryPanel.revalidate();
                subCategoryPanel.repaint();
                subCategoryList.clear();
            } else {

                for (int i = 0; i < categoryList.size(); i++) {
                    if (i == (categoryList.size() - 1)) {
                        selectedCategory = selectedCategory + "'" + categoryList.get(i) + "'";
                    } else {
                        selectedCategory = selectedCategory + "'" + categoryList.get(i) + "',";
                    }
                }

                // System.out.println(selectedCategory);
                String query = "SELECT DISTINCT subcategory_name from CATEGORY where subcategory_name IS NOT NULL and "
                        + "MAINCATEGORY_NAME in (" + selectedCategory + ") order by subcategory_name";
                /* Following query is added to get the main category & sub category from CATEGORY table */
 /*  String query = "SELECT MAINCATEGORY_NAME,SUBCATEGORY_NAME from CATEGORY where subcategory_name IS NOT NULL and "
                        + "MAINCATEGORY_NAME in (" + selectedCategory + ") group by MAINCATEGORY_NAME,SUBCATEGORY_NAME";*/

                //   System.out.println(query);
                PreparedStatement pre = con.prepareStatement(query);
                ResultSet rs = pre.executeQuery();
                subCategoryPanel.removeAll();
                subCategoryPanel.repaint();
                while (rs.next()) {
                    String subcategory_name = rs.getString("subcategory_name").trim();
                    // String mainCategoryName = rs.getString("MAINCATEGORY_NAME").trim(); /* Added for hashMap*/
                    //categorySubcategoryMapping.put(subcategory_name, mainCategoryName); // entry in hashMap
                    javax.swing.JCheckBox box = new javax.swing.JCheckBox(subcategory_name);
                    // Added following condition so that value selected value persists
                    if (subCategoryList.contains(subcategory_name)) {
                        box.setSelected(true);
                    }
                    box.addActionListener(subCategoryActionListener);
                    subCategoryPanel.add(box);
                }

                rs.close();
                stmt.close();
                con.close();
                subCategoryPanel.revalidate();
                subCategoryPanel.repaint();
            }

        } catch (SQLException e) {
            e.printStackTrace();
            System.err.println("SQL Exception");
        } catch (ClassNotFoundException e) {
            System.err.println("Cannot find the database driver");
        }

    }

    /* private void removeSubCategory(String removeCat) {      //hashMap
        System.out.println("In RemovesubCategory " + removeCat);
        
        
       Iterator<Map.Entry<String,String>> mappingIterator = categorySubcategoryMapping.entrySet().iterator();
        while (mappingIterator.hasNext()) {
            Map.Entry<String, String> entry = mappingIterator.next();
            String key = (String) entry.getKey();
            String value = (String) entry.getValue();
             if(removeCat.equalsIgnoreCase(value) && subCategoryList.contains(key))
            {
               subCategoryList.remove(key);
            }
           
        }
    }
     */
    public void fillDaycombo() {

        Connection con = null;
        try {
            con = homeWork.openConnection();
            Statement stmt = con.createStatement();

            String query = "SELECT * from Days";

            PreparedStatement pre = con.prepareStatement(query);
            ResultSet rs = pre.executeQuery();

            while (rs.next()) {
                String name = rs.getString("DAY");
                toDayCombo.addItem(name);
                fromDayCombo.addItem(name);
            }

            rs.close();
            stmt.close();
            con.close();

        } catch (SQLException e) {
            e.printStackTrace();
            System.err.println("SQL Exception");
        } catch (ClassNotFoundException e) {
            System.err.println("Cannot find the database driver");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws SQLException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        homeWork = new hw3();
        homeWork.getMainCategories();
        homeWork.fillDaycombo();
        homeWork.setVisible(true);


        /*  java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hw3().setVisible(true);
            }
        });*/
    }

    private Connection openConnection() throws SQLException, ClassNotFoundException {
        // Load the Oracle database driver 
        DriverManager.registerDriver(new oracle.jdbc.OracleDriver());

        /* 
           Here is the information needed when connecting to a database 
           server. These values are now hard-coded in the program. In 
           general, they should be stored in some configuration file and 
           read at run time. 
         */
        String host = "localhost";
        String port = "1521";
        String dbName = "XE";
        String userName = "shweta";
        String password = "shweta";

        // Construct the JDBC URL 
        String dbURL = "jdbc:oracle:thin:@" + host + ":" + port + ":" + dbName;
        return DriverManager.getConnection(dbURL, userName, password);
    }

    /**
     * Close the database connection
     *
     * @param con
     */
    private void closeConnection(Connection con) {
        try {
            con.close();
        } catch (SQLException e) {
            System.err.println("Cannot close connection: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> averageStarCombo;
    private javax.swing.JLabel averageStarLabel;
    private javax.swing.JTextField averageStarTextField;
    private javax.swing.JLabel averageStarValueLabel;
    private javax.swing.JTable businessResultTable;
    private javax.swing.JButton executeQueryBusinessButton;
    private javax.swing.JTextArea executeQueryBusinessTextArea;
    private javax.swing.JButton executeQueryButton;
    private javax.swing.JTextArea executeQueryTextArea;
    private javax.swing.JLabel fromCheckinLabel;
    private javax.swing.JComboBox<String> fromDayCombo;
    private javax.swing.JComboBox<String> fromHourCombo;
    private javax.swing.JLabel fromReviewLabel;
    private com.toedter.calendar.JDateChooser jDateFromReview;
    private com.toedter.calendar.JDateChooser jDateMemberSince;
    private com.toedter.calendar.JDateChooser jDateToReview;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelCheckin;
    private javax.swing.JPanel jPanelReview;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel mainCategoryPanel;
    private javax.swing.JLabel memberSinceLabel;
    private javax.swing.JLabel noOfCheckinLabel;
    private javax.swing.JLabel noOfCheckinValueLabel;
    private javax.swing.JComboBox<String> noOfCheckinsCombo;
    private javax.swing.JTextField noOfCheckinsTextFeilds;
    private javax.swing.JComboBox<String> numberOfFriendsCombo;
    private javax.swing.JLabel numberOfFriendsLabel;
    private javax.swing.JTextField numberOfFriendsTextField;
    private javax.swing.JLabel numberOfFriendsValueLabel;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JComboBox<String> reviewCountCombo;
    private javax.swing.JLabel reviewCountLabel;
    private javax.swing.JTextField reviewCountTextField;
    private javax.swing.JLabel reviewCountValueLabel;
    private javax.swing.JComboBox<String> selectConditionCombo;
    private javax.swing.JLabel selectConditionLabel;
    private javax.swing.JComboBox<String> starReviewCombo;
    private javax.swing.JLabel starReviewLabel;
    private javax.swing.JTextField starReviewTextField;
    private javax.swing.JLabel starReviewValueLabel;
    private javax.swing.JPanel subCategoryPanel;
    private javax.swing.JLabel toCheckinLabel;
    private javax.swing.JComboBox<String> toDayCombo;
    private javax.swing.JComboBox<String> toHourCombo;
    private javax.swing.JLabel toReviewLabel;
    private javax.swing.JPanel userInputPanel;
    private javax.swing.JPanel userResultPanel;
    private javax.swing.JTable userResultTable;
    private javax.swing.JComboBox<String> votesReviewCombo;
    private javax.swing.JLabel votesReviewLabel;
    private javax.swing.JTextField votesReviewTextField;
    private javax.swing.JLabel votesReviewValueLabel;
    // End of variables declaration//GEN-END:variables

}
